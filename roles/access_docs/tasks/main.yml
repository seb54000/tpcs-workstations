#SPDX-License-Identifier: MIT-0
---

- name: Install apt packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop: "{{ access_docs_apt_packages }}"

- name: Install snap packages
  community.general.snap:
    name: "{{ item.package }}"
    state: present
    classic: "{{ item.classic }}" 
  loop: "{{ access_docs_snap_packages }}"

- name: Ensure this file is deleted
  ansible.builtin.file:
    path: /var/www/html/index.nginx-debian.html
    state: absent

- name: Create parent directory for custom files
  become_user: "{{ item.owner }}"
  ansible.builtin.file:
    path: "{{ item.dest_path | dirname }}"
    state: directory
    owner: "{{ access_docs_user }}"
    group: "{{ access_docs_user }}"
    mode: '0755'
  loop: "{{ access_docs_custom_files + access_docs_template_files }}"
  when: item.dest_path is defined

- name: Copy static custom files
  become_user: "{{ item.owner }}"
  ansible.builtin.copy:
    src: "{{ item.src_path }}"
    dest: "{{ item.dest_path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: '0644'
  loop: "{{ access_docs_custom_files }}"
  when: item.src_path is defined and item.dest_path is defined

- name: Create parent directory for template files
  become_user: "{{ item.owner }}"
  ansible.builtin.file:
    path: "{{ item.dest_path | dirname }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: '0755'
  loop: "{{ access_docs_template_files }}"
  when: item.dest_path is defined

- name: Template and Copy template files
  become_user: "{{ item.owner }}"
  ansible.builtin.template:
    src: "{{ item.src_path }}"
    dest: "{{ item.dest_path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: '0644'
  loop: "{{ access_docs_template_files }}"
  when: item.src_path is defined and item.dest_path is defined

# TODO : run php vms.php before creating the cron job to fail fast if script is not working
- name: Run vms.php script
  ansible.builtin.command: php {{ access_docs_init_vms_php_file_dir }}

- name: Create cron job for vms.php script and aws prom exporter
  ansible.builtin.cron:
    name: "{{ item.name }}"
    minute: "*/5"
    user: root
    job: "{{ item.job }}"
  loop:
    - name: "Update vms.html summary"
      job: "php {{ access_docs_init_vms_php_file_dir }} > /var/tmp/vms.html && mv /var/tmp/vms.html /var/www/html/vms.html"
    - name: "Update aws prom exporter"
      job: "bash {{ access_docs_aws_exporter_script_file }}"


- name: Run guacamole docker-compose and configure it with terraform
  ansible.builtin.include_tasks:
    file: "{{ item }}"
  loop:
    - guacamole_docker_compose.yml
    - guacamole_configure_with_terraform.yml

- name: Run monitoring docker-compose
  ansible.builtin.command: docker-compose -f monitoring_docker_compose.yml up -d
  args:
    chdir: "{{ access_docs_monitoring_dir }}"
  become_user: "{{ access_docs_user }}"
  register: docker_compose_monitoring
  changed_when: docker_compose_monitoring.rc == 0

- name: Get SSL certificate with let's encrypt
  ansible.builtin.command: >-
      certbot --nginx
      -d {{ item }}.{{ dns_subdomain }}
      -d www.{{ item }}.{{ dns_subdomain }}
      --non-interactive --agree-tos
      --no-eff-email
      --no-redirect
      --email 'user@test.com'
  args:  
    creates: "/etc/letsencrypt/live/{{ item }}.{{ dns_subdomain }}" # If file exists, command will not be executed -> Idempotency
  loop: "{{ access_docs_ssl_certificates }}"
  register: certbot_result
  changed_when: "'Successfully received certificate' in certbot_result.stdout or 'Congratulations!' in certbot_result.stdout or 'renewed' in certbot_result.stdout"
  failed_when: "certbot_result.rc != 0 and not ('Certificate not yet due for renewal' in certbot_result.stdout or 'Certificate already exists' in certbot_result.stdout_lines | join(' '))"
  when: acme_certificates_enable | bool

- name: Restart nginx
  ansible.builtin.systemd:
    name: nginx
    state: restarted

- name: Gdrive - template and run python script to copy files from gdrive
  ansible.builtin.include_tasks:
    file: copy_from_gdrive.yml
  when: copy_from_gdrive | bool